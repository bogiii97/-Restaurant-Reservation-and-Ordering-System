"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const user_controller_1 = require("../controllers/user.controller");
const userRouter = express_1.default.Router();
userRouter.route("/login").post((req, res) => new user_controller_1.UserController().login(req, res));
userRouter.route("/loginAdmin").post((req, res) => new user_controller_1.UserController().loginAdmin(req, res));
userRouter.route("/getAdminMail").post((req, res) => new user_controller_1.UserController().getAdminMail(req, res));
userRouter.route("/getMail").post((req, res) => new user_controller_1.UserController().getMail(req, res));
userRouter.route("/changePassword").post((req, res) => new user_controller_1.UserController().changePassword(req, res));
userRouter.route("/register").post((req, res) => new user_controller_1.UserController().register(req, res));
userRouter.route("/changeProfile").post((req, res) => new user_controller_1.UserController().changeProfile(req, res));
userRouter.route("/getUsers").post((req, res) => new user_controller_1.UserController().getUsers(req, res));
userRouter.route("/getRegistrationRequests").get((req, res) => new user_controller_1.UserController().getRegistrationRequests(req, res));
userRouter.route("/setUserStatus").post((req, res) => new user_controller_1.UserController().setUserStatus(req, res));
userRouter.route("/createRestaurant").post((req, res) => new user_controller_1.UserController().createRestaurant(req, res));
userRouter.route("/createReservation").post((req, res) => new user_controller_1.UserController().createReservation(req, res));
userRouter.route("/createOrder").post((req, res) => new user_controller_1.UserController().createOrder(req, res));
userRouter.route("/getAllRestaurantsNames").get((req, res) => new user_controller_1.UserController().getAllRestaurantsNames(req, res));
userRouter.route("/createWaiter").post((req, res) => new user_controller_1.UserController().createWaiter(req, res));
userRouter.route("/getWaiterRestaurant").post((req, res) => new user_controller_1.UserController().getWaiterRestaurant(req, res));
userRouter.route("/getRestaurants").get((req, res) => new user_controller_1.UserController().getRestaurants(req, res));
userRouter.route("/getWaitersNames").post((req, res) => new user_controller_1.UserController().getWaitersNames(req, res));
userRouter.route("/saveRestaurant").post((req, res) => new user_controller_1.UserController().saveRestaurant(req, res));
userRouter.route("/getReservationsDates").get((req, res) => new user_controller_1.UserController().getReservationsDates(req, res));
userRouter.route("/getReservationsDatesForRestaurant").post((req, res) => new user_controller_1.UserController().getReservationsDatesForRestaurant(req, res));
userRouter.route("/getNumberOfUsers").get((req, res) => new user_controller_1.UserController().getNumberOfUsers(req, res));
userRouter.route("/getOrdersForWaiterRestaurant").post((req, res) => new user_controller_1.UserController().getOrdersForWaiterRestaurant(req, res));
userRouter.route("/changeOrder").post((req, res) => new user_controller_1.UserController().changeOrder(req, res));
userRouter.route("/changeReservation").post((req, res) => new user_controller_1.UserController().changeReservation(req, res));
userRouter.route("/getUserOrders").post((req, res) => new user_controller_1.UserController().getUserOrders(req, res));
userRouter.route("/getUserReservations").post((req, res) => new user_controller_1.UserController().getUserReservations(req, res));
userRouter.route("/getWaiterReservations").post((req, res) => new user_controller_1.UserController().getWaiterReservations(req, res));
userRouter.route("/getRestaurantReservations").post((req, res) => new user_controller_1.UserController().getRestaurantReservations(req, res));
userRouter.route("/getLayout").post((req, res) => new user_controller_1.UserController().getLayout(req, res));
userRouter.route("/dropReservation").post((req, res) => new user_controller_1.UserController().dropReservation(req, res));
userRouter.route("/notArrived").post((req, res) => new user_controller_1.UserController().notArrived(req, res));
exports.default = userRouter;
